import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2020-12-25T09:43:44.161192+08:00[Asia/Shanghai]
 * <br>
 * The generated test suite contains 14 tests
 * <br>
 * Covered targets: 269
 * <br>
 * Used time: 0h 0m 20s
 * <br>
 * Needed budget for current results: 77%
 * <br>
 * 
 */
public class EvoMasterTest {

    
    private static final SutHandler controller = new com.carleton.comp5104.cms.driver.EMDriver();
    private static String baseUrlOfSut;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PERSON", 33L)
                .d("PERSON_ID", "349")
            .and().insertInto("PERSON", 32L)
                .d("PERSON_ID", "-84")
            .and().insertInto("PERSON", 31L)
                .d("PERSON_ID", "-528")
            .dtos();
        controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=UUUmasper_%402_i%5EUuu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("You are not allowed to register an account in CMS"));
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Username shouldn't be empty!"));
    }
    
    
    @Test
    public void test_2() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACCOUNT", 6L)
                .d("USER_ID", "251")
                .d("EMAIL", "\"SyXslDRbG\"")
            .and().insertInto("ACCOUNT", 5L)
                .d("USER_ID", "467")
                .d("EMAIL", "NULL")
            .dtos();
        controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/sendVerificationCode?email=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Email shouldn't be empty"));
    }
    
    
    @Test
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/updatePassword?password=Kl")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unauthorized"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/updatePassword?password=nScu3dsmypivgpv")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unauthorized"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/login?" + 
                    "emailOrUserId=fKjfe2HcK8q&" + 
                    "password=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Username or password shouldn't be empty"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/login?" + 
                    "emailOrUserId=h6&" + 
                    "password=w8kw5fyEqnEJfQam")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("UserId is invalid"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Username shouldn't be empty!"));
    }
    
    
    @Test
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=svAKMnyL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("UserId is not valid"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/passwordRecovery?" + 
                    "email=MNGoUN7cm&" + 
                    "verificationCode=ZCLfMj6&" + 
                    "newPassword=B0lSP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/account/logout")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Please login first!"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/updateEmail?email=V")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Unauthorized"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/createRequest?" + 
                    "message=9y7U2EkuUK&" + 
                    "type=vFDli2x")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unauthorized"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/passwordRecovery?" + 
                    "email=bvG9KOVun0mrR&" + 
                    "verificationCode=&" + 
                    "newPassword=6dHKzT4hdBN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Input message shouldn't be empty"));
    }
    
    
    @Test
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/account/logout")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Please login first!"));
    }
    
    
    @Test
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/passwordRecovery?" + 
                    "email=YjfVO&" + 
                    "verificationCode=yTayQZ&" + 
                    "newPassword=tie")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=86")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("You are not allowed to register an account in CMS"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=nTTB3wJuxLYdAeJt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("UserId is not valid"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Username shouldn't be empty!"));
    }
    
    
    @Test
    public void test_7() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/sendVerificationCode?email=OAbIhjUO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
    }
    
    
    @Test
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=K_u4mJSxVdU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("UserId is not valid"));
    }
    
    
    @Test
    public void test_9() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/passwordRecovery?" + 
                    "email=oTCHupE&" + 
                    "verificationCode=FbFACk0B&" + 
                    "newPassword=sFW6DCrgKjDxPmW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
    }
    
    
    @Test
    public void test_10() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/login?" + 
                    "emailOrUserId=0Wxr&" + 
                    "password=7NMIOL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("UserId is invalid"));
    }
    
    
    @Test
    public void test_11() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/updateEmail?email=axVaNyBPkV5zvXi")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Unauthorized"));
    }
    
    
    @Test
    public void test_12() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/createRequest?" + 
                    "message=XLQB9e0RW&" + 
                    "type=z6YZoZ")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unauthorized"));
    }
    
    
    @Test
    public void test_13() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/updatePassword?password=U5Vtg2XeDSXGPM")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unauthorized"));
    }


}
