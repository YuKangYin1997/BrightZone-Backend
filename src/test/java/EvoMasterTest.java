import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2020-12-23T00:12:25.213303+08:00[Asia/Shanghai]
 * <br>
 * The generated test suite contains 17 tests
 * <br>
 * Covered targets: 302
 * <br>
 * Used time: 0h 1m 0s
 * <br>
 * Needed budget for current results: 96%
 * <br>
 * 
 */
public class EvoMasterTest {

    
    private static final SutHandler controller = new com.carleton.comp5104.cms.driver.EMDriver();
    private static String baseUrlOfSut;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0_with500() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/updateEmail?email=O1Hz7ySUvvO8Ht")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/updateEmail"));
    }
    
    
    @Test
    public void test_1_with500() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/createRequest?" + 
                    "message=kQ56ZkxUJM&" + 
                    "type=LZ6gCY8sc72ept")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/createRequest"));
    }
    
    
    @Test
    public void test_2_with500() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("You are not allowed to register an account in CMS"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/login?" + 
                    "emailOrUserId=4ZfZlLnCHDn1bX&" + 
                    "password=w5dHi24cGvMs")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/service/impl/AccountServiceImpl_117_login
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/login"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/createRequest?" + 
                    "message=&" + 
                    "type=FG")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/createRequest"));
    }
    
    
    @Test
    public void test_3_with500() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/updatePassword?password=6kYj5")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/updatePassword"));
    }
    
    
    @Test
    public void test_4_with500() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=vUB")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/service/impl/AccountServiceImpl_54_registerAccount
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/register"));
    }
    
    
    @Test
    public void test_5_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PERSON", 158L)
                .d("PERSON_ID", "922")
            .and().insertInto("PERSON", 157L)
                .d("PERSON_ID", "97")
            .and().insertInto("PERSON", 156L)
                .d("PERSON_ID", "31")
            .and().insertInto("ACCOUNT", 3L)
                .d("USER_ID", "0")
                .d("EMAIL", "NULL")
            .and().insertInto("ACCOUNT", 2L)
                .d("USER_ID", "341")
                .d("EMAIL", "\"evqmaster_7_input\"")
            .and().insertInto("ACCOUNT", 1L)
                .d("USER_ID", "65606")
                .d("EMAIL", "\"evomaster_482_input\"")
            .and().insertInto("ACCOUNT", 0L)
                .d("USER_ID", "-261331")
                .d("EMAIL", "NULL")
            .dtos();
        controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/sendVerificationCode?email=evomaster_1_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/sendVerificationCode?email=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Email shouldn't be empty"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/createRequest?" + 
                    "message=&" + 
                    "type=evomaster_149_inpu")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/createRequest"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/updatePassword?password=evomaster_4_input")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/updatePassword"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/updateEmail?email=yP_zpoWKg2QK")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/updateEmail"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=jpdAz%40C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("You are not allowed to register an account in CMS"));
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/account/logout")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Please login first!"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("You are not allowed to register an account in CMS"));
    }
    
    
    @Test
    public void test_6_with500() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/login?" + 
                    "emailOrUserId=Ry9ilwOeSPDRpX8T&" + 
                    "password=k0X0Eg_gAxTZYsPV")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/service/impl/AccountServiceImpl_117_login
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/login"));
    }
    
    
    @Test
    public void test_7_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACCOUNT", 3L)
                .d("USER_ID", "246")
                .d("EMAIL", "\"3i0SJXp1tgu8h\"")
            .and().insertInto("ACCOUNT", 2L)
                .d("USER_ID", "341")
                .d("EMAIL", "\"AEd\"")
            .and().insertInto("ACCOUNT", 1L)
                .d("USER_ID", "1114182")
                .d("EMAIL", "\"vBZ_\"")
            .and().insertInto("ACCOUNT", 0L)
                .d("USER_ID", "813")
                .d("EMAIL", "\"8bhJIgC\"")
            .dtos();
        controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/sendVerificationCode?email=Unicode")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/sendVerificationCode?email=7NeRsHEkpJWEjv0p")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/createRequest?" + 
                    "message=ghwUkcIHz3KbVpD&" + 
                    "type=")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/createRequest"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/updatePassword?password=")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/updatePassword"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/updateEmail?email=yP_zpoWKg2QK")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/updateEmail"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=413")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("You are not allowed to register an account in CMS"));
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/account/logout")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Please login first!"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/sendVerificationCode?email=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Email shouldn't be empty"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Username shouldn't be empty!"));
    }
    
    
    @Test
    public void test_8_with500() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/createRequest?" + 
                    "message=Hx3Ss06COkGT5z&" + 
                    "type=ujzwTXymexPl8Pp")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/createRequest"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/passwordRecovery?" + 
                    "email=gN7MwDM2dxeLRqZ&" + 
                    "verificationCode=7o9YdoSN&" + 
                    "newPassword=5WOME9G21_3LcA1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/updatePassword?password=aduyO7")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/updatePassword"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/login?" + 
                    "emailOrUserId=&" + 
                    "password=hsvnzh8b")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Username or password shouldn't be empty"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/passwordRecovery?" + 
                    "email=omJ2ks8H1nuHPqpT&" + 
                    "verificationCode=ZQygJuWH3n&" + 
                    "newPassword=IjnE6nRzi0hzB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/createRequest?" + 
                    "message=IoXybfvyMikCzJSP&" + 
                    "type=ZvAqPGLU")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/createRequest"));
    }
    
    
    @Test
    public void test_9_with500() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/sendVerificationCode?email=ZIAHVhRh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/sendVerificationCode?email=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Email shouldn't be empty"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/createRequest?" + 
                    "message=xClH0tpDz4sPIMp&" + 
                    "type=")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/createRequest"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/updatePassword?password=rzE60xPzV")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/updatePassword"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/updateEmail?email=yP_zpoWKg2QK")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/updateEmail"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=w_bPcW")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/service/impl/AccountServiceImpl_54_registerAccount
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/register"));
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/account/logout")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Please login first!"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/sendVerificationCode?email=ndL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Username shouldn't be empty!"));
    }
    
    
    @Test
    public void test_10_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PERSON", 134L)
                .d("PERSON_ID", "388")
            .and().insertInto("PERSON", 133L)
                .d("PERSON_ID", "0")
            .and().insertInto("ACCOUNT", 3L)
                .d("USER_ID", "758")
                .d("EMAIL", "NULL")
            .and().insertInto("ACCOUNT", 2L)
                .d("USER_ID", "-179")
                .d("EMAIL", "\"evomaster_7_input\"")
            .and().insertInto("ACCOUNT", 1L)
                .d("USER_ID", "65608")
                .d("EMAIL", "\"vB\u0083_\"")
            .and().insertInto("ACCOUNT", 0L)
                .d("USER_ID", "0")
                .d("EMAIL", "\"8bhJIgC\"")
            .dtos();
        controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/login?" + 
                    "emailOrUserId=evomaster_382_input&" + 
                    "password=7c_CCei")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/service/impl/AccountServiceImpl_117_login
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/login"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/sendVerificationCode?email=evomaster_1_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/sendVerificationCode?email=evomaster_2_inpu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/createRequest?" + 
                    "message=&" + 
                    "type=")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/createRequest"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/updatePassword?password=evomaster_4_input")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/updatePassword"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/updateEmail?email=yP_zpoWKg2QK")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/controller/BaseController_31_getUserId
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/updateEmail"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=jpdAzBC")
                .then()
                .statusCode(500) // com/carleton/comp5104/cms/service/impl/AccountServiceImpl_54_registerAccount
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/account/register"));
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/account/logout")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Please login first!"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/sendVerificationCode?email=evomaster_6_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/register?emailOrUserId=0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("You already have an account, and you are not allowed to register a new one"));
    }
    
    
    @Test
    public void test_11() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACCOUNT", 128L)
                .d("USER_ID", "303")
            .and().insertInto("ACCOUNT", 127L)
                .d("USER_ID", "0")
            .and().insertInto("ACCOUNT", 126L)
                .d("USER_ID", "886")
            .and().insertInto("ACCOUNT", 125L)
                .d("USER_ID", "684414149")
            .and().insertInto("ACCOUNT", 124L)
                .d("USER_ID", "943")
            .dtos();
        controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/login?" + 
                    "emailOrUserId=%40&" + 
                    "password=Kg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account"));
    }
    
    
    @Test
    public void test_12() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/account/logout")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Please login first!"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/passwordRecovery?" + 
                    "email=esc8aD15UXu&" + 
                    "verificationCode=W4P&" + 
                    "newPassword=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Input message shouldn't be empty"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/passwordRecovery?" + 
                    "email=LCnJlCLUJ6&" + 
                    "verificationCode=OHGC2RTM&" + 
                    "newPassword=CX")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/sendVerificationCode?email=Qe5dw3jXE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
    }
    
    
    @Test
    public void test_13() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/account/logout")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("Please login first!"));
    }
    
    
    @Test
    public void test_14() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/login?" + 
                    "emailOrUserId=8&" + 
                    "password=gg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account"));
    }
    
    
    @Test
    public void test_15() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/sendVerificationCode?email=G8W7ywICF1DooHP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
    }
    
    
    @Test
    public void test_16() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/api/account/passwordRecovery?" + 
                    "email=gqSKAA8JEUma9aUa&" + 
                    "verificationCode=n&" + 
                    "newPassword=jKy01oLn")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errMsg'", containsString("User doesn't exist, please register an account first"));
    }


}
